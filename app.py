import streamlit as st
import pandas as pd
import urllib.request

st.set_page_config(page_title="üìò Pi DB v3", layout="wide")

# --- Configuraci√≥n de hojas y carpetas ---
SHEET_IDS = {
    "PharmD": st.secrets["SHEET_ID_PHARMD"].strip(),
    "PhD": st.secrets["SHEET_ID_PHD"].strip()
}
FOLDER_LINKS = {
    "PharmD": st.secrets["FOLDER_LINK_PHARMD"],
    "PhD": st.secrets["FOLDER_LINK_PHD"]
}
DRIVE_LINK_SHEET_ID = st.secrets["DRIVE_LINK_SHEET_ID"].strip()

# --- Cargar hoja de c√°lculo ---
def load_sheet(sheet_id):
    url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"
    try:
        response = urllib.request.urlopen(url)
        if response.status != 200:
            st.error(f"‚ùå No se pudo acceder al Google Sheet. C√≥digo: {response.status}")
            return pd.DataFrame()
        df = pd.read_csv(url, dtype=str)
        for col in ["Cr√©ditos", "HorasContacto", "A√±o", "Semestre"]:
            if col in df.columns:
                try:
                    df[col] = df[col].fillna("0").astype(int)
                except:
                    df[col] = df[col].astype(str)
        return df
    except Exception as e:
        st.error(f"‚ùå Error al intentar leer Google Sheet: {e}")
        return pd.DataFrame()

# --- Login ---
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    st.title("üìò Bienvenido a Pi DB v3")
    with st.form("login"):
        user = st.text_input("Usuario:")
        password = st.text_input("Contrase√±a:", type="password")
        if st.form_submit_button("Ingresar"):
            if user == "j" and password == "1":
                st.session_state.logged_in = True
                st.rerun()
            else:
                st.error("‚ùå Credenciales incorrectas")
else:
    # --- Panel lateral ---
    st.sidebar.title("Navegaci√≥n")
    programa = st.sidebar.radio("Selecciona el programa:", ["PharmD", "PhD"], key="programa")

    # --- Cargar datos ---
    df = load_sheet(SHEET_IDS[programa])
    df_links = load_sheet(DRIVE_LINK_SHEET_ID)
    if df.empty or df_links.empty:
        st.stop()

    # --- Estado inicial de filtros ---
    for key in ["cod_sel", "tit_sel", "clave_sel"]:
        if key not in st.session_state:
            st.session_state[key] = ""

    # --- UI de Filtros ---
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Filtros de b√∫squeda")
    st.sidebar.caption("‚ÑπÔ∏è Para utilizar un filtro diferente, primero pulsa 'Limpiar Filtro'.")

    if st.sidebar.button("üîÑ Limpiar todos los filtros", key="btn_clear_all"):
        st.session_state["cod_sel"] = ""
        st.session_state["tit_sel"] = ""
        st.session_state["clave_sel"] = ""
        st.rerun()

    codigos = sorted(df["Codificaci√≥n"].dropna().unique().tolist())
    titulos = sorted(df["T√≠tuloCompletoEspa√±ol"].dropna().unique().tolist())

    st.sidebar.markdown("#### Seleccionar c√≥digo:")
    cod_index = codigos.index(st.session_state["cod_sel"]) if st.session_state["cod_sel"] in codigos else 0
    selected_cod = st.sidebar.selectbox("Seleccionar c√≥digo:", codigos, index=cod_index, key="cod_sel")
    if st.sidebar.button("Limpiar Filtro", key="btn_clear_cod"):
        st.session_state["cod_sel"] = ""
        st.rerun()

    st.sidebar.markdown("#### T√≠tulo del curso:")
    tit_index = titulos.index(st.session_state["tit_sel"]) if st.session_state["tit_sel"] in titulos else 0
    selected_tit = st.sidebar.selectbox("T√≠tulo del curso:", titulos, index=tit_index, key="tit_sel")
    if st.sidebar.button("Limpiar Filtro", key="btn_clear_tit"):
        st.session_state["tit_sel"] = ""
        st.rerun()

    st.sidebar.markdown("#### Palabra clave:")
    clave_sel = st.sidebar.text_input("Palabra clave:", value=st.session_state["clave_sel"], key="clave_sel")
    if st.sidebar.button("Limpiar Filtro", key="btn_clear_kw"):
        st.session_state["clave_sel"] = ""
        st.rerun()

    # --- Filtrar DataFrame ---
    df_filtrado = df.copy()
    if st.session_state["cod_sel"]:
        df_filtrado = df[df["Codificaci√≥n"] == st.session_state["cod_sel"]]
    elif st.session_state["tit_sel"]:
        df_filtrado = df[df["T√≠tuloCompletoEspa√±ol"] == st.session_state["tit_sel"]]
    elif st.session_state["clave_sel"]:
        df_filtrado = df[df.apply(lambda row: st.session_state["clave_sel"].lower() in str(row).lower(), axis=1)]

    curso = df_filtrado.iloc[0] if not df_filtrado.empty else df.iloc[0]

    st.title("üìò Bienvenido a Pi DB v3")
    st.header(f"üìö Base de Datos de Cursos ({programa})")

    if curso is None:
        st.warning("No se encontraron cursos que coincidan con los filtros seleccionados.")
        st.stop()

    st.markdown(f"""
    **Codificaci√≥n:** {curso['Codificaci√≥n']} &nbsp;&nbsp;&nbsp; **Estado:** {'Activo' if curso['Estatus'] == '1' else 'Inactivo'}  
    **T√≠tulo (ES):** {curso['T√≠tuloCompletoEspa√±ol']}  
    **T√≠tulo (EN):** {curso['T√≠tuloCompletoIngl√©s']}  
    **Cr√©ditos:** {curso['Cr√©ditos']} &nbsp;&nbsp;&nbsp; **Horas Contacto:** {curso['HorasContacto']}  
    **A√±o:** {curso['A√±o']} &nbsp;&nbsp;&nbsp; **Semestre:** {curso['Semestre']}  
    **Fecha Revisi√≥n:** {curso['FechaUltimaRevisi√≥n']}
    """, unsafe_allow_html=True)

    st.text_area("üìÑ Descripci√≥n del Curso", value=curso["Descripci√≥n"], height=150)
    st.text_area("üìë Comentarios", value=curso["Comentarios"], height=150)

    st.markdown("---")
    st.subheader("üìé Archivos disponibles (Drive)")
    st.markdown("Consulta los documentos espec√≠ficos del curso en su subcarpeta dedicada:")

    folder_row = df_links[(df_links["Codificaci√≥n"] == curso['Codificaci√≥n']) & (df_links["Programa"] == programa)]
    if not folder_row.empty:
        folder_id = folder_row.iloc[0]["FolderID"]
        subfolder_url = f"https://drive.google.com/drive/folders/{folder_id}"
        st.markdown(f"[üìÇ Abrir carpeta del curso {curso['Codificaci√≥n']}]({subfolder_url})")
    else:
        st.warning("‚ö†Ô∏è No se encontr√≥ el enlace directo para este curso.")

    st.markdown("---")
    st.caption("Divisi√≥n de Evaluaci√≥n de la Efectividad Curricular e Institucional. Todos los derechos reservados. JHA 2025¬©. Administrador: Jonathan Hern√°ndez-Agosto, EdD, GCG.")
